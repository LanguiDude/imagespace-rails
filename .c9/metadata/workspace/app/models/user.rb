{"changed":true,"filter":false,"title":"user.rb","tooltip":"/app/models/user.rb","value":"class User < ActiveRecord::Base\n    attr_accessor :remember_token\n    before_save { self.email = email.downcase }\n    VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)*\\.[a-z]+\\z/i\n    validates :email, presence: true, length: { maximum: 255 },\n                      format: { with: VALID_EMAIL_REGEX },\n                      uniqueness: { case_sensitive: false }\n                      \n    has_secure_password\n    validates :password, length: { minimum: 6 }\n    \n    # Returns the hash digest of the given string.\n  def self.digest(string)\n    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :\n                                                  BCrypt::Engine.cost\n    BCrypt::Password.create(string, cost: cost)\n  end\n\n  # Returns a random token.\n  def self.new_token\n    SecureRandom.urlsafe_base64\n  end\n  \n  class << self\n    # Returns the hash digest of the given string.\n    def digest(string)\n      cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :\n                                                    BCrypt::Engine.cost\n      BCrypt::Password.create(string, cost: cost)\n    end\n\n    # Returns a random token.\n    def new_token\n      SecureRandom.urlsafe_base64\n    end\n  end\n  \n    # Returns the hash digest of the given string.\n  def User.digest(string)\n    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :\n                                                  BCrypt::Engine.cost\n    BCrypt::Password.create(string, cost: cost)\n  end\n\n  # Returns a random token.\n  def User.new_token\n    SecureRandom.urlsafe_base64\n  end\n  \n  # Remembers a user in the database for use in persistent sessions.\n  def remember\n    self.remember_token = User.new_token\n    update_attribute(:remember_digest, User.digest(remember_token))\n  end\n  \n  # Returns true if the given token matches the digest.\n  def authenticated?(remember_token)\n    return false if remember_digest.nil?\n    BCrypt::Password.new(remember_digest).is_password?(remember_token)\n  end\n  \n  # Forgets a user.\n  def forget\n    update_attribute(:remember_digest, nil)\n  end\nend\n","undoManager":{"mark":64,"position":67,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":47},"end":{"row":9,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":4},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":4},"end":{"row":10,"column":50}},"text":"# Returns the hash digest of the given string."},{"action":"insertText","range":{"start":{"row":10,"column":50},"end":{"row":11,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":11,"column":0},"end":{"row":20,"column":0}},"lines":["  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64"]},{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":5}},"text":"  end"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":20,"column":5},"end":{"row":21,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":2},"end":{"row":21,"column":70}},"text":"  # Remembers a user in the database for use in persistent sessions."},{"action":"insertText","range":{"start":{"row":21,"column":70},"end":{"row":22,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":22,"column":0},"end":{"row":25,"column":0}},"lines":["  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))"]},{"action":"insertText","range":{"start":{"row":25,"column":0},"end":{"row":25,"column":5}},"text":"  end"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":1}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":1},"end":{"row":21,"column":2}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":25,"column":5},"end":{"row":26,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":2},"end":{"row":26,"column":3}},"text":"\\"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":26,"column":2},"end":{"row":26,"column":3}},"text":"\\"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":26,"column":1},"end":{"row":26,"column":2}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":1}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":55}},"text":"  # Returns true if the given token matches the digest."},{"action":"insertText","range":{"start":{"row":26,"column":55},"end":{"row":27,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":27,"column":0},"end":{"row":29,"column":0}},"lines":["  def authenticated?(remember_token)","    BCrypt::Password.new(remember_digest).is_password?(remember_token)"]},{"action":"insertText","range":{"start":{"row":29,"column":0},"end":{"row":29,"column":5}},"text":"  end"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":5},"end":{"row":30,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":30,"column":0},"end":{"row":30,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":2},"end":{"row":30,"column":21}},"text":"  # Forgets a user."},{"action":"insertText","range":{"start":{"row":30,"column":21},"end":{"row":31,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":31,"column":0},"end":{"row":33,"column":0}},"lines":["  def forget","    update_attribute(:remember_digest, nil)"]},{"action":"insertText","range":{"start":{"row":33,"column":0},"end":{"row":33,"column":5}},"text":"  end"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":0},"end":{"row":30,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":0},"end":{"row":30,"column":1}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":30,"column":1},"end":{"row":30,"column":2}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":36},"end":{"row":28,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":28,"column":0},"end":{"row":28,"column":6}},"text":"      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":6},"end":{"row":28,"column":42}},"text":"return false if remember_digest.nil?"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":28,"column":6},"end":{"row":28,"column":7}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":6},"end":{"row":28,"column":7}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":28,"column":5},"end":{"row":28,"column":6}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":28,"column":4},"end":{"row":28,"column":5}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":4},"end":{"row":2,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":4},"end":{"row":1,"column":5}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":5},"end":{"row":1,"column":6}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":6},"end":{"row":1,"column":7}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":7},"end":{"row":1,"column":8}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":8},"end":{"row":1,"column":9}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":8},"end":{"row":1,"column":9}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":8},"end":{"row":1,"column":9}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":9},"end":{"row":1,"column":10}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":10},"end":{"row":1,"column":11}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":11},"end":{"row":1,"column":12}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":12},"end":{"row":1,"column":13}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":13},"end":{"row":1,"column":14}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":14},"end":{"row":1,"column":15}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":15},"end":{"row":1,"column":16}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":16},"end":{"row":1,"column":17}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":17},"end":{"row":1,"column":18}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":18},"end":{"row":1,"column":19}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":19},"end":{"row":1,"column":20}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":20},"end":{"row":1,"column":21}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":21},"end":{"row":1,"column":22}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":22},"end":{"row":1,"column":23}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":23},"end":{"row":1,"column":24}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":24},"end":{"row":1,"column":25}},"text":"b"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":25},"end":{"row":1,"column":26}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":26},"end":{"row":1,"column":27}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":27},"end":{"row":1,"column":28}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":28},"end":{"row":1,"column":29}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":29},"end":{"row":1,"column":30}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":30},"end":{"row":1,"column":31}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":31},"end":{"row":1,"column":32}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":32},"end":{"row":1,"column":33}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":2},"end":{"row":12,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":2},"end":{"row":12,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":2},"end":{"row":11,"column":50}},"text":"  # Returns the hash digest of the given string."},{"action":"insertText","range":{"start":{"row":11,"column":50},"end":{"row":12,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":12,"column":0},"end":{"row":21,"column":0}},"lines":["  def self.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def self.new_token","    SecureRandom.urlsafe_base64"]},{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":5}},"text":"  end"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":21,"column":5},"end":{"row":22,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":22,"column":0},"end":{"row":22,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":22,"column":2},"end":{"row":23,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":23,"column":0},"end":{"row":23,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":23,"column":2},"end":{"row":23,"column":15}},"text":"class << self"},{"action":"insertText","range":{"start":{"row":23,"column":15},"end":{"row":24,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":24,"column":0},"end":{"row":35,"column":0}},"lines":["    # Returns the hash digest of the given string.","    def digest(string)","      cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                    BCrypt::Engine.cost","      BCrypt::Password.create(string, cost: cost)","    end","","    # Returns a random token.","    def new_token","      SecureRandom.urlsafe_base64","    end"]},{"action":"insertText","range":{"start":{"row":35,"column":0},"end":{"row":35,"column":5}},"text":"  end"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":2},"end":{"row":49,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":49,"column":0},"end":{"row":49,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":2},"end":{"row":55,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":55,"column":0},"end":{"row":55,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":2},"end":{"row":61,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":61,"column":0},"end":{"row":61,"column":2}},"text":"  "}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1415426956638}